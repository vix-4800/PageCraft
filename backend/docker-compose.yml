services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "${APP_PORT:-8080}:80"
            - "${APP_SSL_PORT:-443}:443"
        volumes:
            - "./:/var/www/html"
            - "./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro"
            - "certbot_etc_volume:/etc/letsencrypt"
            - "certbot_var_volume:/var/lib/letsencrypt"
        networks:
            - backend_network
        restart: unless-stopped
        tty: true
        working_dir: /var/www/html
        depends_on:
            - php-fpm
            - mysql
            - redis

    certbot:
        image: certbot/certbot
        volumes:
            - "certbot_etc_volume:/etc/letsencrypt"
            - "certbot_var_volume:/var/lib/letsencrypt"
            - ./:/var/www/html
        command: certonly --webroot --webroot-path=/var/www/html/public --email ${DOMAIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
        depends_on:
            - nginx

    php-fpm:
        build:
            context: ./docker/php
            dockerfile: Dockerfile
        container_name: backend
        volumes:
            - "./:/var/www/html"
            - "./docker/php/conf.d/php.ini:/usr/local/etc/php/php.ini"
            - "./docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"
            - "./docker/php/conf.d/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini"
        environment:
            - XDEBUG_CLIENT_HOST=${XDEBUG_CLIENT_HOST:-127.0.0.1}
        restart: unless-stopped
        tty: true
        working_dir: /var/www/html
        ports:
            - 9001:9001
            - 9003:9003
        networks:
            - backend_network
        depends_on:
            - mysql
            - redis
        healthcheck:
            test: ["CMD-SHELL", "php-fpm -t || exit 1"]
            interval: 10s
            timeout: 3s
            retries: 3

    mysql:
        image: "mysql/mysql-server:8.0"
        container_name: mysql
        restart: unless-stopped
        tty: true
        ports:
            - "${DB_PORT:-3306}:3306"
        environment:
            MYSQL_ROOT_HOST: "%"
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - "mysql_volume:/var/lib/mysql"
            - "./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql"
        networks:
            - backend_network
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - "-p${DB_PASSWORD}"
            retries: 3
            timeout: 5s

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: phpmyadmin
        environment:
            PMA_HOST: mysql
            PMA_PORT: "${DB_PORT:-3306}"
        ports:
            - "${PHPMYADMIN_PORT:-8081}:80"
        networks:
            - backend_network
        depends_on:
            - mysql

    redis:
        image: "redis:alpine"
        container_name: redis
        ports:
            - "${REDIS_PORT:-6379}:6379"
        volumes:
            - "redis_volume:/data"
        restart: unless-stopped
        networks:
            - backend_network
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s

    redisinsight:
        image: redislabs/redisinsight:latest
        container_name: redisinsight
        ports:
            - "${REDISINSIGHT_PORT:-5540}:5540"
        networks:
            - backend_network
        depends_on:
            - redis

    meilisearch:
        image: getmeili/meilisearch:latest
        container_name: meilisearch
        restart: unless-stopped
        ports:
            - "${MEILISEARCH_PORT:-7700}:7700"
        networks:
            - backend_network
        volumes:
            - "meilisearch_volume:/meili_data"

    mailhog:
        image: mailhog/mailhog
        container_name: mailhog
        ports:
            - "1025:1025"
            - "${MAILHOG_PORT:-8025}:8025"
        networks:
            - backend_network

    supervisor:
        build:
            context: ./docker/supervisor
            dockerfile: Dockerfile
        container_name: supervisor
        volumes:
            - "./:/var/www/html"
            - "./docker/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf"
        restart: unless-stopped
        networks:
            - backend_network

    matomo:
        image: matomo
        container_name: matomo
        restart: unless-stopped
        volumes:
            - "matomo_volume:/var/www/html:z"
        environment:
            - MATOMO_DATABASE_HOST=mysql
        ports:
            - "${MATOMO_PORT:-8082}:80"
        networks:
            - backend_network

networks:
    backend_network:
        name: backend_network
        driver: bridge

volumes:
    mysql_volume:
        driver: local
        name: mysql_volume
    redis_volume:
        driver: local
        name: redis_volume
    meilisearch_volume:
        driver: local
        name: meilisearch_volume
    matomo_volume:
        driver: local
        name: matomo_volume
    certbot_etc_volume:
        driver: local
        name: certbot_etc_volume
    certbot_var_volume:
        driver: local
        name: certbot_var_volume
